# Generated by Django 2.2.19 on 2021-04-03 12:58

from __future__ import unicode_literals

from django.db import migrations
import csv, os
from pathlib import Path

from collections import defaultdict
from django.apps import apps


class BulkCreateManager(object):
    """
    This helper class keeps track of ORM objects to be created for multiple
    model classes, and automatically creates those objects with `bulk_create`
    when the number of objects accumulated for a given model class exceeds
    `chunk_size`.
    Upon completion of the loop that's `add()`ing objects, the developer must
    call `done()` to ensure the final set of objects is created for all models.
    """

    def __init__(self, chunk_size=100):
        self._create_queues = defaultdict(list)
        self.chunk_size = chunk_size

    def _commit(self, model_class):
        model_key = model_class._meta.label
        model_class.objects.bulk_create(self._create_queues[model_key])
        self._create_queues[model_key] = []

    def add(self, obj):
        """
        Add an object to the queue to be created, and call bulk_create if we
        have enough objs.
        """
        model_class = type(obj)
        model_key = model_class._meta.label
        self._create_queues[model_key].append(obj)
        if len(self._create_queues[model_key]) >= self.chunk_size:
            self._commit(model_class)

    def done(self):
        """
        Always call this upon completion to make sure the final partial chunk
        is saved.
        """
        for model_name, objs in self._create_queues.items():
            if len(objs) > 0:
                self._commit(apps.get_model(model_name))

def load_initial_data(apps, schema_editor):
    SadDesa = apps.get_model("v1", "SadDesa")

    BASE_DIR = Path(__file__).resolve().parent.parent
    with open(os.path.join(os.path.dirname(BASE_DIR),'v1', 'migrations', 'csv', 'sad_desa.csv'),encoding="utf8") as csv_file:
        reader = csv.reader(csv_file,delimiter=",")

        bulk_mgr = BulkCreateManager(chunk_size=20)
        # header = next(reader)

        for row in reader:
            if row:
                bulk_mgr.add(SadDesa(id=row[3],nama_desa=row[5],kecamatan_id=row[15]))
        bulk_mgr.done()

def reverse_func(apps, schema_editor):
    SadDesa = apps.get_model("v1", "SadDesa")

    SadDesa.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('v1', '0041_auto_20210403_1950'),
    ]

    operations = [
        migrations.RunPython(load_initial_data, reverse_func)
    ]
